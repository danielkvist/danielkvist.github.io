<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Dkvist</title>
    <link>/tags/go/</link>
    <description>Recent content in go on Dkvist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bubble sort algorithm in Golang</title>
      <link>/posts/bubble-sort-golang/</link>
      <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/bubble-sort-golang/</guid>
      <description>What is Bubble sort The Bubble sort algorithm is one of the most simple sorting algorithms out there. It repeatedly steps trough a list of elements, compares adjacent elements and swaps them if they are in the wrong order. Yeah, or at least that&amp;rsquo;s what Wikipedia just says.
I know that you already know what a Bubble sort algorithm is Bubble sort is one of the most famous algorithms in the world.</description>
    </item>
    
    <item>
      <title>Making a very simple Telegram bot with Golang</title>
      <link>/posts/simple-telegram-bot-with-golang/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/simple-telegram-bot-with-golang/</guid>
      <description>First things first This days I&amp;rsquo;m working on Botio. An opinionated CLI to build and manage bots and their commands for different platforms among which is Telegram. And it&amp;rsquo;s from working on Botio that this article comes from.
I would also like to warm you that the code below may seem at first glance too simple and therefore disappoint a little. If that&amp;rsquo;s your case, I&amp;rsquo;m sorry. In this article I just want to lay the groundwork for future articles that (I hope) might interest you a bit more.</description>
    </item>
    
    <item>
      <title>Finding dead links in a Website with Go</title>
      <link>/posts/findind-dead-links-with-golang/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/findind-dead-links-with-golang/</guid>
      <description>First things first The idea behind this article comes from my experience building Kelsier, which idea itself comes from this article.
The code that I&amp;rsquo;m going to show below is very likely to have and will have aspects that can be improved. So please, if you see something you don&amp;rsquo;t think is entirely ideal or there&amp;rsquo;s something you know can be done in a better way, let me know by opening an issue in the repository of this site.</description>
    </item>
    
    <item>
      <title>Doubly linked lists in Go</title>
      <link>/posts/doubly-linked-lists-golang/</link>
      <pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/doubly-linked-lists-golang/</guid>
      <description>What is a Doubly linked list Like Linked lists, Doubly linked lists are a very simple data structure whose definition from Wikipedia is:
 A Doubly linked list is a linked data structure that consists of a set of sequentially linked records called nodes. Each Node contains three fields: two link fields (references to the previous and to the next Node in the sequence of nodes) and one data field.</description>
    </item>
    
    <item>
      <title>Linked lists in Go</title>
      <link>/posts/linked-lists-golang/</link>
      <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/linked-lists-golang/</guid>
      <description>What is a Linked list Linked lists are one of the most simpler and basic data structures which are defined by the Wikipedia as follows:
 A Linked list is a linear collection of data elements, whose order is not given by their physical placement in memory. Instead, each element points to the next. It is a data structure consisting of a collection of nodes which together represent a sequence.</description>
    </item>
    
  </channel>
</rss>